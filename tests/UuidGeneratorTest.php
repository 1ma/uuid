<?php

namespace UMA\Uuid\Tests;

use PHPUnit\Framework\TestCase;
use UMA\Uuid\CombGenerator;
use UMA\Uuid\Uuid;
use UMA\Uuid\UuidGenerator;
use UMA\Uuid\Version1Generator;
use UMA\Uuid\Version4Generator;

class UuidGeneratorTest extends TestCase
{
    const ITERATIONS = 10000;

    /**
     * @dataProvider formatAndCollisionsProvider
     *
     * @param UuidGenerator $sut
     * @param int           $version The expected version to be found
     *                               on all Uuids generated by $sut.
     */
    public function testFormatAndCollisions(UuidGenerator $sut, int $version)
    {
        $seen = [];

        for ($i = 0; $i < self::ITERATIONS; $i++) {
            $str = $sut->generate()->asString();

            self::assertTrue(Uuid::isUuid($str));
            self::assertSame((string) $version, $str[14], "Uuid version is not the expected '1': $str");
            self::assertContains($str[19], ['8', '9', 'a', 'b'], "Uuid variant is not the expected '10xx': $str");
            self::assertArrayNotHasKey($str, $seen, "OMG FOUND A COLLISION: $str");

            $seen[$str] = true;
        }
    }

    public function formatAndCollisionsProvider(): array
    {
        return [
            [new CombGenerator(), 4],
            [new Version1Generator('01:23:45:67:89:ab'), 1],
            [new Version4Generator(), 4],
        ];
    }
}
